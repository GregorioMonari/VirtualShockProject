#LEZIONE
NON CHIUDERE LA FINESTRA DEL DATAPATH, SI SMINCHIA TUTTO DENTRO PERCHE' RESETTA AI COMPONENTI DI DEFAULT
@STEP1-logisim
PRIMA DI FARE QUALSIASI MICROSPOSTAMENTO SCRIVILO ALLA LAVAGNA
- fagli vedere pc+4 che lo lasci, dai colpi di clock e incrementa continuamente
- fagli vedere diversi microspostamenti, i mux, la costante, le modalità dell'alu, etc...
- carica con a+cost (0+cost) e c->rd un valore nel register file
- poi fagli vedere una add dal register file
SE IL RF CAMPIONA ffffffff STAI ATTENTO DI AVER SETTATO CORRETTAMENTE OEC

@STEP2-lavagna
- spiega che tutti i comandi sono rappresentabili in una stringa, ogni clock viene fornita una stringa, che corrisponde ad un riquadro del diagramma degli stati.
- la stringa può essere fornita da una rete sequenziale, ma è molto difficile. Come si può fare in modo migliore?
- hint di microcodice spiegando come simulare l'onda con una rom e un contatore

@STEP3-lavagna
- rappresenta i comandi secondo la tua codifica e trova le stringhe di bit corrispondenti per una addi
#ADDI
IR<- M[PC] Carico cop, registri e costante in IR, ma adesso lo settiamo manuale
PC<-PC+4, A<-RS1, B<-RS2
wepc14, oe1pc15, +4->31?, weA5, weB8, rs1, rs2, M4
rom_1:  1000 0000 0000 0000 1100 0001 0011 0000 = 8000c130h
C<-A+cost
wrC11, oe1A6, cost, M4
rom_1:  0000 0000 0000 0000 0000 1000 0101 0000 = 00000850h
RD<-C
rd, oe1C12
rom_1:  0000 0000 0000 0000 0001 0000 0000 0000 = 00001000h

@STEP4-logisim
- esegui la addi in maniera automatica
#1-Setta rs1 e rs2 e dai un colpo di clock per far partire le ram
#1.1- se sei in auto mode setta anche la costante ma senza l'enable
#2-lascia rs1 e rs2 ed esegui la prima microistruzione
#3-abilita costante ed esegui seconda microistruzione
#4-disattiva rs1 e rs2, attiva we(rd) ed esegui la terza microistruzione