# 
# VirtualShock RTL V0.3.2
# By Gregorio Monari
# Based on Hennessey and Patterson dlx
# 

#---IF/DECODE---
ir<-m[pc] #if phase
a<-rs1,b<-rs2,pc<-pc+1 #decode phase
# Interrupts no vectorization
#iar<-pc
#pc<-0,ien<-0
# Interrupts with vectorization and nesting
#nesting
a<-r30 #addr 2
mar<-a-1,c<-a-1
mdr<-pc,r30<-c
m[mar]<-mdr
#vectorization
mdr<-n
mar<-mdr
mdr<-m[mar]
pc<-mdr,ien<-0 #addr 9 -> cc 7


#---RTL Instructions---
#ALU type instructions
@add:r
c<-a+b
rd<-c
@sub:r
c<-a-b
rd<-c
#to add: and, xor, or, mult, ...
@addi:i
c<-a+cost
rs2<-c #uso rs2 come destinazione
@subi:i
c<-a-cost
rs2<-c
#to add: andi, xori, ori, multi, ...


#Memory type instructions 
@sw:i
mar<-a+cost
mdr<-b
m[mar]<-mdr

@lw:i
mar<-a+cost
mdr<-m[mar]
c<-mdr
rs2<-c


#Jump instructions
@jr:r
pc<-a

@j:j
pc<-pc+cost


#Branch
@beqz:i
a==0?
pc<-pc+cost

@bneqz:i
a!=0?
pc<-pc+cost


#Set condition
@seq:r
c<-a==b
rd<-c


#Stack
@push:i
mar<-b-1,c<-b-1 #aggiorna stack pointer (sp)
mdr<-a,rs2<-c
m[mar]<-mdr

@pop:i
mar<-b
mdr<-m[mar] #separa bus quando fai op in memoria per fare alu in parallelo
c<-b+1 #aggiorna sp
rs2<-c,c<-mdr
rs1<-c


#Procedures
@call:i
mdr<-pc
pc<-pc+cost
c<-b-1,mar<-b-1 #aggiorna sp
rs2<-c,m[mar]<-mdr

@callr:i
mdr<-pc
pc<-a
c<-b-1,mar<-b-1 #aggiorna sp
rs2<-c,m[mar]<-mdr

@ret:i
mar<-b
mdr<-m[mar]
c<-b+1 #aggiorna sp
rs2<-c,pc<-mdr


#I/O
@in:i
mar<-a+cost #nelle slide usa b, io metto a perchè per b ho già rs2 modificato
mdr<-io[mar]
c<-mdr
rs2<-c

@out:i
mar<-a+cost
mdr<-b
io[mar]<-mdr


#Interrupt
@sti:r
ien<-1
@cli:r
ien<-0
#@rfe_nointerrupt:r #no vectorization or nesting
#pc<-iar,ien<-1
@rfe:r
mar<-a
mdr<-m[mar]
c<-a+1
rs1<-c,pc<-mdr,ien<-1